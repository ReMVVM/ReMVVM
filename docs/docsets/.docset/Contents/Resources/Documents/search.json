{"Typealiases.html#/s:10ReMVVMCore9ViewModela":{"name":"ViewModel","abstract":"<p>Undocumented</p>"},"Typealiases.html#/s:10ReMVVMCore23InterceptorNextFunctiona":{"name":"InterceptorNextFunction","abstract":"<p>Custom function that Interceptor&rsquo;s next(action:completion:) method will be intercepted to</p>"},"Typealiases.html#/s:10ReMVVMCore8AnyStorea":{"name":"AnyStore","abstract":"<p>Undocumented</p>"},"Protocols/StoreState.html#/s:10ReMVVMCore10StoreStateP7factoryAA16ViewModelFactory_pvp":{"name":"factory","abstract":"<p>View model factory that will be used to create view models.</p>","parent_name":"StoreState"},"Protocols/StateSource.html#/s:10ReMVVMCore11StateSourceP5state0C0Qzvp":{"name":"state","abstract":"<p>Current state value</p>","parent_name":"StateSource"},"Protocols/StateObserver.html#/s:10ReMVVMCore13StateObserverP0C0Qa":{"name":"State","abstract":"<p>type of state to observe</p>","parent_name":"StateObserver"},"Protocols/StateObserver.html#/s:10ReMVVMCore13StateObserverP10willReduce5statey0C0Qz_tF":{"name":"willReduce(state:)","abstract":"<p>Notifies that state is going to be reduced. Implementation of this method is optional ie. empty implemetation is provided.</p>","parent_name":"StateObserver"},"Protocols/StateObserver.html#/s:10ReMVVMCore13StateObserverP9didReduce5state03oldC0y0C0Qz_AHSgtF":{"name":"didReduce(state:oldState:)","abstract":"<p>Norifies the state is reduced or initial value is provided while adding to source. Implementation of this method is optional ie. empty implemetation is provided.</p>","parent_name":"StateObserver"},"Protocols/StateAssociated.html#/s:10ReMVVMCore15StateAssociatedP0C0Qa":{"name":"State","abstract":"<p>State type associated with the object</p>","parent_name":"StateAssociated"},"Protocols/Source.html#/s:10ReMVVMCore6SourceP3add8observeryqd___tAA13StateObserverRd__lF":{"name":"add(observer:)","abstract":"<p>Adds state observer</p>","parent_name":"Source"},"Protocols/Source.html#/s:10ReMVVMCore6SourceP6remove8observeryqd___tAA13StateObserverRd__lF":{"name":"remove(observer:)","abstract":"<p>Removes state observer</p>","parent_name":"Source"},"Protocols/Reducer.html#/s:10ReMVVMCore7ReducerP6ActionQa":{"name":"Action","abstract":"<p>type of action handled by this Reducer</p>","parent_name":"Reducer"},"Protocols/Reducer.html#/s:10ReMVVMCore7ReducerP5StateQa":{"name":"State","abstract":"<p>type of state handled by this Reducer</p>","parent_name":"Reducer"},"Protocols/Reducer.html#/s:10ReMVVMCore7ReducerP6reduce5state4with5StateQzAH_6ActionQztFZ":{"name":"reduce(state:with:)","abstract":"<p>Pure function that returns new state based on current state and the action</p>","parent_name":"Reducer"},"Protocols/Reducer.html#/s:10ReMVVMCore7ReducerPAAE7compose4withAA08ComposedC0Oyxqd__Gmqd__m_tAaBRd__5StateQyd__AIRtzlFZ":{"name":"compose(with:)","abstract":"<p>Combine reducer with other reducer for the same State type.</p>","parent_name":"Reducer"},"Protocols/Middleware.html#/s:10ReMVVMCore10MiddlewareP6ActionQa":{"name":"Action","abstract":"<p>type of action handled by this Middleware</p>","parent_name":"Middleware"},"Protocols/Middleware.html#/s:10ReMVVMCore10MiddlewareP5StateQa":{"name":"State","abstract":"<p>type of state handled by this Middleware</p>","parent_name":"Middleware"},"Protocols/Middleware.html#/s:10ReMVVMCore10MiddlewareP6onNext3for6action11interceptor10dispatchery5StateQz_6ActionQzAA11InterceptorCyAlJGAA10Dispatcher_ptF":{"name":"onNext(for:action:interceptor:dispatcher:)","abstract":"<p>Method will be called during dispatch process.</p>","parent_name":"Middleware"},"Protocols/ConvertMiddleware.html#/s:10ReMVVMCore17ConvertMiddlewareP6ActionQa":{"name":"Action","abstract":"<p>type of action handled by this Middleware</p>","parent_name":"ConvertMiddleware"},"Protocols/ConvertMiddleware.html#/s:10ReMVVMCore17ConvertMiddlewareP5StateQa":{"name":"State","abstract":"<p>type of state handled by this Middleware</p>","parent_name":"ConvertMiddleware"},"Protocols/ConvertMiddleware.html#/s:10ReMVVMCore17ConvertMiddlewareP6onNext3for6action10dispatchery5StateQz_6ActionQzAA10Dispatcher_ptF":{"name":"onNext(for:action:dispatcher:)","abstract":"<p>Method will be called during dispatch process.</p>","parent_name":"ConvertMiddleware"},"Protocols/ConvertMiddleware.html#/s:10ReMVVMCore10MiddlewareP6onNext3for6action11interceptor10dispatchery5StateQz_6ActionQzAA11InterceptorCyAlJGAA10Dispatcher_ptF":{"name":"onNext(for:action:interceptor:dispatcher:)","parent_name":"ConvertMiddleware"},"Protocols/AnyMiddleware.html#/s:10ReMVVMCore13AnyMiddlewareP6onNext3for6action11interceptor10dispatcheryqd___AA11StoreAction_pAA11InterceptorCyAaI_pqd__GAA10Dispatcher_ptlF":{"name":"onNext(for:action:interceptor:dispatcher:)","abstract":"<p>Undocumented</p>","parent_name":"AnyMiddleware"},"Protocols/Dispatcher.html#/s:10ReMVVMCore10DispatcherP8dispatch6actionyAA11StoreAction_p_tF":{"name":"dispatch(action:)","abstract":"<p>Dishpatches an action.</p>","parent_name":"Dispatcher"},"Protocols/Dispatcher.html#/s:10ReMVVMCore10DispatcherPAAEyyycAA11StoreAction_pyXAcip":{"name":"subscript(_:)","abstract":"<p>Subscript to create closure to dispatch</p>","parent_name":"Dispatcher"},"Protocols/ViewModelFactory.html#/s:10ReMVVMCore16ViewModelFactoryP7creates4typeSbqd__m_tlF":{"name":"creates(type:)","abstract":"<p>Returns true if is able to create view model of specified type</p>","parent_name":"ViewModelFactory"},"Protocols/ViewModelFactory.html#/s:10ReMVVMCore16ViewModelFactoryP6create3keyqd__SgSSSg_tlF":{"name":"create(key:)","abstract":"<p>Creates view model of specified type or returns nil if is not able</p>","parent_name":"ViewModelFactory"},"Protocols/Initializable.html#/s:10ReMVVMCore13InitializablePxycfc":{"name":"init()","abstract":"<p>Undocumented</p>","parent_name":"Initializable"},"Protocols/Initializable.html":{"name":"Initializable","abstract":"<p>Initializable object can be created with non-parametrized constructor.</p>"},"Protocols/ViewModelFactory.html":{"name":"ViewModelFactory","abstract":"<p>Factory that creates view models</p>"},"Protocols/Dispatcher.html":{"name":"Dispatcher","abstract":"<p>Object that is able to dishpatch actions</p>"},"Protocols/AnyMiddleware.html":{"name":"AnyMiddleware","abstract":"<p>Middleware enchances action&rsquo;s dispatch functionality and may be applied in the store during initialization process. Before action is reduced in the store&rsquo;s reducer it has to go through all middlewares in the stack and each onNext() method has to be called.</p>"},"Protocols/ConvertMiddleware.html":{"name":"ConvertMiddleware","abstract":"<p>Special type of middleware that converts one action to the another. Source action will never be reduced.</p>"},"Protocols/Middleware.html":{"name":"Middleware","abstract":"<p>Middleware associated with specific Action&rsquo;s and State&rsquo;s type. </p>"},"Protocols/Reducer.html":{"name":"Reducer","abstract":"<p>Provides pure function that creates new state based on the action and current state. It is associated with specific Action type.</p>"},"Protocols/Source.html":{"name":"Source","abstract":"<p>Describes a source that can be used to observe state changes</p>"},"Protocols/StateAssociated.html":{"name":"StateAssociated","abstract":"<p>Associate object with the State</p>"},"Protocols/StateObserver.html":{"name":"StateObserver","abstract":"<p>Observes every change of the state</p>"},"Protocols/StateSource.html":{"name":"StateSource","abstract":"<p>Source with current state</p>"},"Protocols.html#/s:10ReMVVMCore11StoreActionP":{"name":"StoreAction","abstract":"<p>Action that can be dispatched by Dispatrcher eg. Store.</p>"},"Protocols/StoreState.html":{"name":"StoreState","abstract":"<p>Application state managed by  the store. It has to provide ViewModelFactory that will be used to create view models.</p>"},"Enums/EmptyReducer.html#/s:10ReMVVMCore12EmptyReducerO6reduce5state4withq_q__xtFZ":{"name":"reduce(state:with:)","abstract":"<p>Returns not changed state.</p>","parent_name":"EmptyReducer"},"Enums/ComposedReducer.html#/s:10ReMVVMCore15ComposedReducerO6reduce5state4with5StateQzAH_AA11StoreAction_ptFZ":{"name":"reduce(state:with:)","abstract":"<p>Pure function that returns new state based on current state and the action</p>","parent_name":"ComposedReducer"},"Enums/ReMVVM/ViewModel.html#/s:10ReMVVMCore0A4MVVMO9ViewModelC12wrappedValuexSgvp":{"name":"wrappedValue","abstract":"<p>wrapped value of view model</p>","parent_name":"ViewModel"},"Enums/ReMVVM/ViewModel.html#/s:10ReMVVMCore0A4MVVMO9ViewModelC3key5storeAEy_xGSSSg_AA5StoreCyypGSgtcfc":{"name":"init(key:store:)","abstract":"<p>Initializes property wrapper</p>","parent_name":"ViewModel"},"Enums/ReMVVM/ViewModel.html#/s:10ReMVVMCore0A4MVVMO9ViewModelC3key5storeAEy_xGSSSg_AA5StoreCyypGSgtcAA13StateObserverRzlufc":{"name":"init(key:store:)","abstract":"<p>Initializes property wrapper</p>","parent_name":"ViewModel"},"Enums/ReMVVM/State.html#/s:10ReMVVMCore0A4MVVMO5StateC12wrappedValuexSgvp":{"name":"wrappedValue","abstract":"<p>wrapped state value</p>","parent_name":"State"},"Enums/ReMVVM/State.html#/s:10ReMVVMCore0A4MVVMO5StateC9Publishera":{"name":"Publisher","abstract":"<p>Undocumented</p>","parent_name":"State"},"Enums/ReMVVM/State.html#/s:10ReMVVMCore0A4MVVMO5StateC14projectedValue7Combine10PublishersO10CompactMapVy_AG12AnyPublisherVyxSgs5NeverOGxGvp":{"name":"projectedValue","abstract":"<p>Combine&rsquo;s publisher of value</p>","parent_name":"State"},"Enums/ReMVVM/State.html#/s:10ReMVVMCore0A4MVVMO5StateC4withAEy_xGAA5StoreCyxSgGSg_tcfc":{"name":"init(with:)","abstract":"<p>Initializes property wrapper</p>","parent_name":"State"},"Enums/ReMVVM/State.html#/s:10ReMVVMCore15StateAssociatedP0C0Qa":{"name":"State","parent_name":"State"},"Enums/ReMVVM/State.html#/s:10ReMVVMCore11StateSourceP5state0C0Qzvp":{"name":"state","parent_name":"State"},"Enums/ReMVVM/State.html#/s:10ReMVVMCore6SourceP3add8observeryqd___tAA13StateObserverRd__lF":{"name":"add(observer:)","parent_name":"State"},"Enums/ReMVVM/State.html#/s:10ReMVVMCore6SourceP6remove8observeryqd___tAA13StateObserverRd__lF":{"name":"remove(observer:)","parent_name":"State"},"Enums/ReMVVM/Dispatcher.html#/s:10ReMVVMCore0A4MVVMO10DispatcherC12wrappedValueAaD_pvp":{"name":"wrappedValue","abstract":"<p>wrapped value of view model</p>","parent_name":"Dispatcher"},"Enums/ReMVVM/Dispatcher.html#/s:10ReMVVMCore0A4MVVMO10DispatcherC4withAeaD_pSg_tcfc":{"name":"init(with:)","abstract":"<p>Initializes property wrapper</p>","parent_name":"Dispatcher"},"Enums/ReMVVM/Dispatcher.html#/s:10ReMVVMCore10DispatcherP8dispatch6actionyAA11StoreAction_p_tF":{"name":"dispatch(action:)","parent_name":"Dispatcher"},"Enums/ReMVVM.html#/s:10ReMVVMCore0A4MVVMO10initialize4withyAA5StoreCyxG_tAA0F5StateRzlFZ":{"name":"initialize(with:)","abstract":"<p>Initialize ReMVVM with the store. By default .empty store is used.</p>","parent_name":"ReMVVM"},"Enums/ReMVVM/Dispatcher.html":{"name":"Dispatcher","abstract":"<p>A property wrapper that serves Dispatcher object.</p>","parent_name":"ReMVVM"},"Enums/ReMVVM/State.html":{"name":"State","abstract":"<p>A property wrapper that serves state of specific type.</p>","parent_name":"ReMVVM"},"Enums/ReMVVM/ViewModel.html":{"name":"ViewModel","abstract":"<p>A property wrapper that serves view model of specified type.</p>","parent_name":"ReMVVM"},"Enums/ReMVVM.html":{"name":"ReMVVM","abstract":"<p>Undocumented</p>"},"Enums/ComposedReducer.html":{"name":"ComposedReducer","abstract":"<p>Reducer that combines other reducers for the same State but different Actions</p>"},"Enums/EmptyReducer.html":{"name":"EmptyReducer","abstract":"<p>Reducer that doesn&rsquo;t change the state.</p>"},"Classes/Store/StateWrapper.html#/s:10ReMVVMCore5StoreC12StateWrapperC12wrappedValueqd__vp":{"name":"wrappedValue","abstract":"<p>Undocumented</p>","parent_name":"StateWrapper"},"Classes/Store/StateWrapper.html#/s:10ReMVVMCore5StoreC12StateWrapperC9Publishera":{"name":"Publisher","abstract":"<p>Undocumented</p>","parent_name":"StateWrapper"},"Classes/Store/StateWrapper.html#/s:10ReMVVMCore5StoreC12StateWrapperC14projectedValue7Combine12AnyPublisherVyqd__s5NeverOGvp":{"name":"projectedValue","abstract":"<p>Undocumented</p>","parent_name":"StateWrapper"},"Classes/Store/StateWrapper.html#/wrappedValue":{"name":"wrappedValue","parent_name":"StateWrapper"},"Classes/Store.html#/s:10ReMVVMCore5StoreC5statexvp":{"name":"state","abstract":"<p>Current state value</p>","parent_name":"Store"},"Classes/Store.html#/s:10ReMVVMCore5StoreC4with7reducer10middleware12stateMappersACyxGx_qd__mSayAA13AnyMiddleware_pGSayAA11StateMapperCyxGGtcAA0cK0Rz0K0Qyd__RszAA7ReducerRd__AA0C6Action_p0N0Rtd__lufc":{"name":"init(with:reducer:middleware:stateMappers:)","abstract":"<p>Initializes the store</p>","parent_name":"Store"},"Classes/Store.html#/s:10ReMVVMCore5StoreC8dispatch6actionyAA0C6Action_p_tF":{"name":"dispatch(action:)","abstract":"<p>Dishpatches actions in the store. Actions go through middleware and are reduced at the end.</p>","parent_name":"Store"},"Classes/Store.html#/s:10ReMVVMCore5StoreC3add8observeryqd___tAA13StateObserverRd__lF":{"name":"add(observer:)","abstract":"<p>Adds the state observer. Observer will be notified on every state change occured in the store. It&rsquo;s allowed to add observer for any application&rsquo;s &lsquo;substate&rsquo; - but appropriete StateMapper has to be added during the store initialization.</p>","parent_name":"Store"},"Classes/Store.html#/s:10ReMVVMCore5StoreC6remove8observeryqd___tAA13StateObserverRd__lF":{"name":"remove(observer:)","abstract":"<p>Removes state observer.</p>","parent_name":"Store"},"Classes/Store/StateWrapper.html":{"name":"StateWrapper","abstract":"<p>Undocumented</p>","parent_name":"Store"},"Classes/Store.html#/s:10ReMVVMCore5StoreC3anyACyypGvp":{"name":"any","abstract":"<p>Converts to AnyStore</p>","parent_name":"Store"},"Classes/Store.html#/s:10ReMVVMCore5StoreC6mappedACyqd__SgGylF":{"name":"mapped()","abstract":"<p>Converts to Store with specific state type using mappers provided in initialization phase.</p>","parent_name":"Store"},"Classes/Store.html#/s:10ReMVVMCore5StoreC4mock5state7factory10onDispatchACyypGqd___AA16ViewModelFactory_pyAA0C6Action_p_AA10MockSourceCtcSgtlFZ":{"name":"mock(state:factory:onDispatch:)","abstract":"<p>Creates  Store with  mock (should be used for test purposes only)</p>","parent_name":"Store"},"Classes/Store.html#/s:10ReMVVMCore5StoreC4mock5state9viewModel10onDispatchACyypGqd___qd_0_yAA0C6Action_p_AA10MockSourceCtcSgtr0_lFZ":{"name":"mock(state:viewModel:onDispatch:)","abstract":"<p>Creates  Store with  mock (should be used for test purposes only)</p>","parent_name":"Store"},"Classes/Store.html#/s:10ReMVVMCore5StoreC4mock9viewModel10onDispatchACyypGqd___yAA0C6Action_p_AA10MockSourceCtcSgtlFZ":{"name":"mock(viewModel:onDispatch:)","abstract":"<p>Creates  Store with  mock (should be used for test purposes only)</p>","parent_name":"Store"},"Classes/Store.html#/s:10ReMVVMCore5StoreC4mock7factory10onDispatchACyypGAA16ViewModelFactory_p_yAA0C6Action_p_AA10MockSourceCtcSgtFZ":{"name":"mock(factory:onDispatch:)","abstract":"<p>Creates  Store with  mock (should be used for test purposes only)</p>","parent_name":"Store"},"Classes/Store.html#/s:10ReMVVMCore5StoreC4mock6sourceACyypGAA10MockSourceC_tFZ":{"name":"mock(source:)","abstract":"<p>Creates  Store with  mock (should be used for test purposes only)</p>","parent_name":"Store"},"Classes/Store.html#/s:10ReMVVMCore5StoreC4test4with7reducer10middleware12stateMappers7factory10onDispatchACyypG5StateQyd___qd__mSayAA13AnyMiddleware_pGSayAA0M6MapperCyAMGGAA16ViewModelFactory_pyAA0C6Action_pcSgtypRszAA7ReducerRd__lFZ":{"name":"test(with:reducer:middleware:stateMappers:factory:onDispatch:)","abstract":"<p>Undocumented</p>","parent_name":"Store"},"Classes/MockSource.html#/s:10ReMVVMCore10MockSourceC17OnDispatchClosurea":{"name":"OnDispatchClosure","abstract":"<p>Undocumented</p>","parent_name":"MockSource"},"Classes/MockSource.html#/s:10ReMVVMCore10MockSourceC7factory10onDispatchAcA16ViewModelFactory_p_yAA11StoreAction_p_ACtcSgtcfc":{"name":"init(factory:onDispatch:)","abstract":"<p>Initializes the source</p>","parent_name":"MockSource"},"Classes/MockSource.html#/s:10ReMVVMCore10MockSourceC3set5stateyx_tlF":{"name":"set(state:)","abstract":"<p>Sets the State that will be served by MockSource</p>","parent_name":"MockSource"},"Classes/MockSource.html#/s:10ReMVVMCore10MockSourceC3add8observeryx_tAA13StateObserverRzlF":{"name":"add(observer:)","abstract":"<p>Adds state observer</p>","parent_name":"MockSource"},"Classes/MockSource.html#/s:10ReMVVMCore10MockSourceC6remove8observeryx_tAA13StateObserverRzlF":{"name":"remove(observer:)","abstract":"<p>Removes state observer</p>","parent_name":"MockSource"},"Classes/MockSource.html#/s:10ReMVVMCore10MockSourceC8dispatch6actionyAA11StoreAction_p_tF":{"name":"dispatch(action:)","abstract":"<p>Dishpatches an action.</p>","parent_name":"MockSource"},"Classes/StateMapper.html#/s:10ReMVVMCore11StateMapperC3mapACyxGqd__xc_tclufc":{"name":"init(map:)","abstract":"<p>Initialize mapper with map finction</p>","parent_name":"StateMapper"},"Classes/StateMapper.html#/s:10ReMVVMCore11StateMapperC3forACyxGs7KeyPathCyxqd__G_tclufc":{"name":"init(for:)","abstract":"<p>Initialize mapper with keyPath to substate</p>","parent_name":"StateMapper"},"Classes/StateMapper.html#/s:10ReMVVMCore11StateMapperC3mapAdCyqd__Gxqd__c_tlF":{"name":"map(map:)","abstract":"<p>Creates enclosing mapper</p>","parent_name":"StateMapper"},"Classes/StateMapper.html#/s:10ReMVVMCore11StateMapperC3map4withACyqd__Gs7KeyPathCyqd__xG_tlF":{"name":"map(with:)","abstract":"<p>Creates enclosing mapper</p>","parent_name":"StateMapper"},"Classes/Interceptor.html#/s:10ReMVVMCore11InterceptorC4nextACyxq_GyxSg_yq_cSgtc_tcfc":{"name":"init(next:)","abstract":"<p>Initialize interceptor with custom function.</p>","parent_name":"Interceptor"},"Classes/Interceptor.html#/s:10ReMVVMCore11InterceptorC4next6action10completionyxSg_yq_cSgtF":{"name":"next(action:completion:)","abstract":"<p>Intercepts call to the custom function</p>","parent_name":"Interceptor"},"Classes/ReMVVMConfig.html#/s:10ReMVVMCore0A10MVVMConfigC5storeAA5StoreCyypGvp":{"name":"store","abstract":"<p>Configured store</p>","parent_name":"ReMVVMConfig"},"Classes/ReMVVMConfig.html#/s:10ReMVVMCore0A10MVVMConfigC17viewModelProviderAA04VieweF0Cvp":{"name":"viewModelProvider","abstract":"<p>View model provider associated with the store</p>","parent_name":"ReMVVMConfig"},"Classes/ReMVVMConfig.html#/s:10ReMVVMCore0A10MVVMConfigC5storeAcA5StoreCyxG_tcAA0E5StateRzlufc":{"name":"init(store:)","abstract":"<p>Initialize the configuration with store</p>","parent_name":"ReMVVMConfig"},"Classes/ReMVVMConfig.html#/s:10ReMVVMCore0A10MVVMConfigC5storeAcA5StoreCyypG_tcfc":{"name":"init(store:)","abstract":"<p>Initialize the configuration with store</p>","parent_name":"ReMVVMConfig"},"Classes/ReMVVMConfig.html#/s:10ReMVVMCore0A10MVVMConfigC5emptyACvpZ":{"name":"empty","abstract":"<p>Empty ReMVVM configuration with no state.</p>","parent_name":"ReMVVMConfig"},"Classes/ReMVVMConfig.html#/s:10ReMVVMCore0A10MVVMConfigC6sharedACvpZ":{"name":"shared","abstract":"<p>Shared ReMVVM configuration thats was set by ReMVVM.initialize(), by default ReMVVMConfig.empty is used.</p>","parent_name":"ReMVVMConfig"},"Classes/ViewModelProvider.html#/s:10ReMVVMCore17ViewModelProviderC4withAcA5StoreCyxG_tcAA0G5StateRzlufc":{"name":"init(with:)","abstract":"<p>Initialize provider with the store</p>","parent_name":"ViewModelProvider"},"Classes/ViewModelProvider.html#/s:10ReMVVMCore17ViewModelProviderC4withAcA5StoreCyypG_tcfc":{"name":"init(with:)","abstract":"<p>Undocumented</p>","parent_name":"ViewModelProvider"},"Classes/ViewModelProvider.html#/s:10ReMVVMCore17ViewModelProviderC04viewD04withxSgSSSg_tlF":{"name":"viewModel(with:)","parent_name":"ViewModelProvider"},"Classes/ViewModelProvider.html#/s:10ReMVVMCore17ViewModelProviderC04viewD04withxSgSSSg_tAA13StateObserverRzlF":{"name":"viewModel(with:)","parent_name":"ViewModelProvider"},"Classes/ViewModelProvider.html#/s:10ReMVVMCore17ViewModelProviderC7creates4typeSbxm_tlF":{"name":"creates(type:)","abstract":"<p>Returns true if is able to provide view model of specified type.</p>","parent_name":"ViewModelProvider"},"Classes/SingleViewModelFactory.html#/s:10ReMVVMCore22SingleViewModelFactoryC4withACyxGxSgSSSgc_tcfc":{"name":"init(with:)","abstract":"<p>Initializes factory with closure</p>","parent_name":"SingleViewModelFactory"},"Classes/SingleViewModelFactory.html#/s:10ReMVVMCore22SingleViewModelFactoryC7creates4typeSbqd__m_tlF":{"name":"creates(type:)","abstract":"<p>Returns true if is able to create view model of specified type</p>","parent_name":"SingleViewModelFactory"},"Classes/SingleViewModelFactory.html#/s:10ReMVVMCore22SingleViewModelFactoryC6create3keyqd__SgSSSg_tlF":{"name":"create(key:)","abstract":"<p>Creates view model of specified type or returns nil if is not able</p>","parent_name":"SingleViewModelFactory"},"Classes/InitializableViewModelFactory.html#/s:10ReMVVMCore29InitializableViewModelFactoryCACycfc":{"name":"init()","abstract":"<p>Initializes factory</p>","parent_name":"InitializableViewModelFactory"},"Classes/InitializableViewModelFactory.html#/s:10ReMVVMCore29InitializableViewModelFactoryC7creates4typeSbxm_tlF":{"name":"creates(type:)","abstract":"<p>Returns true if is able to create view model of specified type</p>","parent_name":"InitializableViewModelFactory"},"Classes/InitializableViewModelFactory.html#/s:10ReMVVMCore29InitializableViewModelFactoryC6create3keyxSgSSSg_tlF":{"name":"create(key:)","abstract":"<p>Creates view model of specified type or returns nil if is not able</p>","parent_name":"InitializableViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:10ReMVVMCore25CompositeViewModelFactoryCACycfc":{"name":"init()","abstract":"<p>Initialize empty factory that creates Initializable view models. Other factories may be added by add() method.</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:10ReMVVMCore25CompositeViewModelFactoryC4withACSayAA0deF0_pG_tcfc":{"name":"init(with:)","abstract":"<p>Initialize factory with other factories</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:10ReMVVMCore25CompositeViewModelFactoryC4withAcA0deF0_p_tcfc":{"name":"init(with:)","abstract":"<p>Initialize factory with other factory.</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:10ReMVVMCore25CompositeViewModelFactoryC4withACxyc_tclufc":{"name":"init(with:)","abstract":"<p>Initialize factory with factory method</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:10ReMVVMCore25CompositeViewModelFactoryC4withACxSgyc_tclufc":{"name":"init(with:)","abstract":"<p>Initialize factory with factory method</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:10ReMVVMCore25CompositeViewModelFactoryC4withACxSgSSSgc_tclufc":{"name":"init(with:)","abstract":"<p>Initialize factory with factory method</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:10ReMVVMCore25CompositeViewModelFactoryC3add7factoryyAA0deF0_p_tF":{"name":"add(factory:)","abstract":"<p>Adds factory to composite view model factory</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:10ReMVVMCore25CompositeViewModelFactoryC3add7factoryyxyc_tlF":{"name":"add(factory:)","abstract":"<p>Adds factory to composite view model factory</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:10ReMVVMCore25CompositeViewModelFactoryC3add7factoryyxSgyc_tlF":{"name":"add(factory:)","abstract":"<p>Adds factory to composite view model factory</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:10ReMVVMCore25CompositeViewModelFactoryC3add7factoryyxSgSSSgc_tlF":{"name":"add(factory:)","abstract":"<p>Adds factory to composite view model factory</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:10ReMVVMCore25CompositeViewModelFactoryC7creates4typeSbxm_tlF":{"name":"creates(type:)","abstract":"<p>Returns true if is able to create view model of specified type</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:10ReMVVMCore25CompositeViewModelFactoryC6create3keyxSgSSSg_tlF":{"name":"create(key:)","abstract":"<p>Creates view model of specified type or returns nil if is not able</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html":{"name":"CompositeViewModelFactory","abstract":"<p>ViewModelFactory that is composition of other factories. By default creates view models with empty constructor ie. Initializable view models.</p>"},"Classes/InitializableViewModelFactory.html":{"name":"InitializableViewModelFactory","abstract":"<p>ViewModelFactory that creates view models using empty constructor (Initializable view models)</p>"},"Classes/SingleViewModelFactory.html":{"name":"SingleViewModelFactory","abstract":"<p>Creates view models based on closure given in initializer.</p>"},"Classes/ViewModelProvider.html":{"name":"ViewModelProvider","abstract":"<p>Provides view models using ViewModelFactory from the current state in the store.</p>"},"Classes/ReMVVMConfig.html":{"name":"ReMVVMConfig","abstract":"<p>ReMVVM configuration</p>"},"Classes/Interceptor.html":{"name":"Interceptor","abstract":"<p>Intercepts call of next(action:completion:) method to the custom function. Used by Middleware to intercept the action to the next middleware in the stack."},"Classes/StateMapper.html":{"name":"StateMapper","abstract":"<p>Maps state to any other &lsquo;substate&rsquo; that may be observed in the store, used in Reducers and Middlewares. All mapers has to be added during Store initialization.</p>"},"Classes/MockSource.html":{"name":"MockSource","abstract":"<p>Source that is used to feed the Store with mock data, used for testing purposes.</p>"},"Classes/Store.html":{"name":"Store","abstract":"<p>Contains application state that can be changed only by dispatching an action.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}